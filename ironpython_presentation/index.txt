Im doing an introduction to IronPython presentation at the Victoria .NET user
group tomorrow, I've been attending the user group for about a year and Im
pretty excited about presenting. I think python is a fantastic language and
its great to be able to build software on the .NET framework with it.

## The Slides

![][1]

#### Introduction

I wanted to start with the second slide and have a photo of a pub on the
contact slide but decided to get through this before trying out PowerPoint
jokes.

![][2]

#### Why Python

I just plan to discuss [Why I started using Python.][3] The cartoon is, of
course, [XKCD][4].

![][5]

#### Python

Basic information about the language and its background. Would have liked to
have added [meta programming][6] or at least .. to the paradigms.

I think its a fantastic language so I'll mention its expressive, fun,
productive or whatever adjectives I've got in my head at the time.

![][7]

#### People using Python

I really want to demonstrate that Python is real language, being used by real
people, to write real code.


I probably should also have mentioned [Google App Engine][8] here which I've
been tinkering with a bit recently and think is pretty cool.

![][9]

#### IronPython

The Python language on .NET. Most of the demo is doing cool stuff in .NET with
the Python language. I think it goes further than this and allows developers
to use their own paradigms and patterns to do .NET development.

![][10]

#### C# and IronPython comparison

I saw this example in the awesome [Iron Python in Action][11] book. I included
it as its a great introduction IronPython code, as it clearly and simply shows
differences on similarities with C#.

![][12]

#### Dynamic Language Runtime

The [Dynamic Language Runtime][13] project is open source. Its quite well
[described here][14] as:

* A dynamic [type system][15]

* [Dynamic method dispatch][16]

* [Dynamic code generation][17]

[IronLisp][18] has been superseded by the [IronScheme][19] project.

![][20]

#### Dynamic Typing

This slide is just a brief overview of what [duck typing][21] is.

It is great for writing test objects, but I have a slide for the later.


![][22]

#### Interactive Interpreter

I think its awesomely cool, and I use it through the entire demo so I thought
it might be worth warning people.

## The Demo

The demo is a series of scripts run into the IronPython Interactive Console.
I've uploaded the very small collection of scripts for this demo [here][23].

#### IronPython and the CLR

Create a string, show how its methods can be reflected. Import the CLR and
show how the .NET String methods are now available.

    #!/use/bin/python
    # Introduction to IronPython and the CLR

    # Standard first Python console command
    2 + 2

    # Create a string
    s = 'Hello IronPython'

    # Inspect its methods, note that its only Python methods.
    dir(s)

    # Python has a method to make the text uppercase
    s.upper()

    # Import the CLR
    import clr

    # Now look at the same objects methods,

    # We now see the .NET string methods!
    dir(s)

    # And can use them!
    s.ToUpper()

[Screen Shot][24]

#### Using a .NET Classes

Create a [WebClient][25] object from the .NET framework to download an RSS
feed. Use an xml2py module written by [Harry Pierson][26] to deserialise the
RSS feed into an object graph. Then send the dates and titles to the [Speech
Synthesizer][27]. I've seen this done before in an IronPython presentation, and
just thought it was to much fun to leave out.


    #!/use/bin/python
    import clr

    # Create a WebClient and download a string of XML
    from System.Net import WebClient
    w = WebClient()
    xml = w.DownloadString('http://feeds.theage.com.au/rssheadlines/technology.xml')

    # Lets have a look at first 60 characters of the xml..
    print xml[0:60]

    # If bad stuff happens in the presentation..

    #xml = open('theage.rss').read()

    # Deserialize to objects using xml2py

    from devhawk import xml2py
    rss = xml2py.parseString(xml)

    # Print the results
    for post in rss.channel.item:
      print post.pubDate, post.title

    # Import Speech
    clr.AddReference('System.Speech')
    from System.Speech import *
    ss = Synthesis.SpeechSynthesizer()

    # Say titles and dates using the SpeechSynthesizer
    for post in rss.channel.item:
      s = "%s. %s." % (post.pubDate[:16], post.title)
      ss.SpeakAsync(s)

[Screen Shot][28]

#### SQL

I really dont want to do this in the presentation. I did spend a fair amount
of time playing round with asynchronous SQL queries for use in a WPF
application, but it seemed too complicated for the demo so I've left it out. I
use


    #!/use/bin/python
    # import a simple wrapper around System.Data.SqlClient
    # the wrapper is on my blog, I just wanted to show the AdventureWorks
    # database, it seems a bit of .NET presentation tradition.

    from demo import sql

    # setup a query on the AdventureWords database
    query = 'SELECT * FROM Production.Product'

    sql.connection = 'Data Source=localhost\SQLEXPRESS;InitialCatalog=AdventureWorks;Integrated Security=SSPI;'

    # execute the query
    products = sql.SqlQuery(query)

    # print some results
    for p in products[:5]:
      print p.Name

####

#### WPF, Data Binding and Exec

I think there is some pretty cool stuff in this demo. Although it takes a lot
more to write real applications it does open new ways to develop and test .NET
applications.


    #!/use/bin/python
    # More pythonic way of getting the feed.. lets hope I have internet
    from devhawk import xml2py
    rss = xml2py.parse('http://feeds.theage.com.au/rssheadlines/technology.xml')

    # Importing avalon starts a new thread to run the WPF application
    # It sets up some dispatures so the console can talk to the GUI

    from samples import avalon

    # Create a window, show it and load some XAML into it
    w = avalon.Window()
    w.Show()
    xaml = avalon.LoadXaml('demo.xaml')
    w.Content = xaml

    # Loading names is really cool, it traverses the control tree
    # described in the XAML and creates a dictionary of names and
    # controls. We can add those dictionary items to the local scope,
    # so we get the same effect as a generated designer files in
    # Visual Studio.

    avalon.LoadNames(xaml,locals())

    # We can bind a Python list of Python objects to the ListView
    listView.ItemsSource = rss.channel.item

    # Create a button click callback that will execute the script
    # in the query TextBox.
    def OnClick(*args):
      try:
        exec (query.Text)
      except:
        print "Script threw an exception"
      pass

    # Wire up the click event to our function
    execute.Click += OnClick

    # We can now execute this on the client
    listView.ItemsSource = [p for p in rss.channel.item if p.title.find('to')>= 0]

[Screen Shot][29]

## More Slides

![][30]

### Testing in Python

Its really cool you can do true test driven development in that you can write
unit tests for classes and methods that havent yet been written. Some cool GUI
testing is also possible using some the stuff in this presentation.

![][31]

### Tools / SDKs

Im not expecting to mention [Python Studio][32] or [IpyDbg][33] as Ill
probably be running out of time.

I really should have included a link to [python.org][34], Ill make sure I
mention it.

You can get [IronPython here][35] and the [Silverlight Dynamic Languages
SDK][36]

![][37]

### Resources

[Dive Into Python][38] Free online, python for programmers.

[IronPython In Action][39] Python and everything .NET with TDD and MVC
practices.

[IronPython Cookbook][40] Online collection of IronPython .NET scripts.

[IronPython Urls][41], MSDN,

[Devhawk][26] Harry Pierson, Program Manager at Microsoft.

[Voidspace][42] Michael Foord, Author IronPython in Action.

![][43]

### Thanks

By this stage Ill almost certainly be running late, and probably be really
worried about some minor disaster during the presentation.

I hope it goes well and everyone takes something out of it, I look forward to
hearing what you thought.


   [1]: introduction.png

   [2]: why-python.png

   [3]: /journal/a-taste-of-python/

   [4]: http://xkcd.com/353/

   [5]: python.png

   [6]: http://www.python.org/doc/essays/metaclasses/

   [7]: who-uses_it.png

   [8]: http://code.google.com/appengine/

   [9]: iron-python.png

   [10]: code-comparision.png

   [11]: http://www.manning.com/foord/

   [12]: dynamic-language-runtime.png

   [13]: http://dlr.codeplex.com/

   [14]: http://en.wikipedia.org/wiki/Dynamic_Language_Runtime

   [15]: http://en.wikipedia.org/wiki/Type_system

   [16]: http://en.wikipedia.org/wiki/Dynamic_dispatch

   [17]: http://en.wikipedia.org/wiki/Runtime_code_generation

   [18]: http://www.codeplex.com/IronLisp

   [19]: http://www.codeplex.com/IronScheme

   [20]: dynamic-typing.png

   [21]: http://en.wikipedia.org/wiki/Duck_typing

   [22]: interactive-interpreter.png

   [23]: http://static.sharpthinking.com.au/2009/iron_python_presentation/demo.zip

   [24]: python-and-the-clr.png

   [25]: http://msdn.microsoft.com/en-us/library/system.net.webclient.aspx

   [26]: http://www.devhawk.net/

   [27]: http://msdn.microsoft.com/en-us/library/system.speech.synthesis.speechsynthesizer.aspx

   [28]: webclient-xml2py-speech.png

   [29]: execute-statements-databinding.png

   [30]: testing-in-python.png

   [31]: tools-sdks.png

   [32]: www.codeplex.com/IronPythonStudio

   [33]: http://github.com/devhawk/ipydbg/tree/master

   [34]: http://www.python.org/

   [35]: www.codeplex.com/IronPython

   [36]: www.codeplex.com/sdlsdk

   [37]: resources.png

   [38]: http://www.diveintopython.org/

   [39]: www.manning.com/foord/

   [40]: http://www.ironpython.info/index.php/Main_Page

   [41]: http://ironpython-urls.blogspot.com/

   [42]: http://www.voidspace.org.uk/ironpython/index.shtml

   [43]: thanks.png

