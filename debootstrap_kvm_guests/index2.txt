# debootstap images for 

I wanted to write a post covering preparing the host, creating a virtual
machine (VM), setting up networking and running it with [KVM][kvm], but it
turned out to be way more involved than I expected.  To break things up a bit
I'll start by covering installing KVM, creating a disk image, running it and
connecting to it via its console.  I'll cover the networking aspects in a later
post.

I'm using a Debain 9 host and creating Debian 9 VMs in the post. For Ubuntu
hosts and VMs the process will be almost identical. For other systems your
mileage will vary. 

There are several tools for running virtual machines in a Linux host system
including Xen, VirtualBox, KVM and QEMU. In this post I'll be using a common
combination of three tools:

  * [QEMU][qemu] is an emulator, which can be used independently. 
  * [KVM][kvm] provides the kernal modules to utilize CPU virtualization extensions.
  * [libvirt][libvirt] is used to manage the virtual machine definitions and can run these
  definitions on various virtualization technologies including qemu and KVM.

`libvert' includes a command-line tool called `virsh` which can be used to
define and manage machine definitions as well as starting, stoping and
connecting to thier consoles. 

## Preparing the host system

To run virtual machines efficiently the CPU needs to support hardware
virtualization. This can be checked on a machine by looking at the CPU flags in
`/proc/cpuinfo`. For Intel VT technology the flags should include `vmx` for
AMD-V they should include `svm`. The following command should print either
`vmx` or `svm` for every CPU in the system that has either flag.

```
# egrep -wo 'vmx|svm' /proc/cpuinfo
```

All the tools described above are provided by the packages. These need to be
installed on the host system.

```
apt install qemu-kvm libvirt-clients libvirt-daemon-system
```

After installing these packages the `virsh` command can be used to list running
machines, the `--all` flag is used in include non-running machines. At this
point it should print an empty list.

```
# virsh list --all
 Id    Name                           State
----------------------------------------------------
```

To create a virtual machine the `virt-install` tool is used. New machines can
be created by providing installation media, for this it is generally required
to connect to the virtual machine's display and input devices to set it up,
either `virt-viewer` or a VNC client can be used. I'm not going to go into this
here as I ultimately want to automate this setup.

## Preparing a VM disk image

To create a runnable disk image there are some pretty standard tasks and
various ways of archieving them. The general steps are listed below.

  * Create a disk image file
  * Connect the image file as a block device
  * Partition the image, if desired
  * Install a filesystem/s
  * Mount the filesystem/s
  * Install the base system
  * Install a bootloader
  * Set the root user password

Firstly on the host system I'm going to install some tools.

```
apt-get install qemu-utils debootstrap 
```

The `qemu-utils` package provides a tools `qemu-image` to create various type
of disk images and `qemu-nbd` which allows images to be mounted as network
block devices. It's possible to create raw image files with the `dd` utility
and mount them as a loop device with `losetup`, but I'm going to create `qcow2`
images. `qcow2` is a copy-on-write file format for storing disk images, it can
grow as data is added and has some snapshotting capabilities but it can't be
mounted directly and it is slow allocating new space.

The `debootstrap` package is used to install the Debian base system to
directory in a filesystem. Once installed the directory can be used as Debian
root file system in a chroot, this is pretty convenient as it allows running
programs (`update-grub2` and `passwd`) in the image.

The ndb module should be loaded, this should add up to 16 `/dev/nbd*` block
devices we can use later.

```
modprobe nbd max_part=16
```


The `qemu-image` program can be used to create 10G qcow2 image file.

```
qemu-img create -f qcow2 our-disk.qcow2 10G
```





```
kvm-nbd -c /dev/nbd0 mail-server.qcow2
```

# partition disk
sfdisk /dev/nbd0 << EOF
,4GiB,S
;
EOF





Images 



In libvirt VMs are
refered to as `domains` and in other documentation as `guests`.


[libvirt]: https://libvirt.org/
[qemu]: https://www.qemu.org/
[kvm]: https://www.linux-kvm.org/
[installmedia]: https://www.server-world.info/en/note?os=Debian_9&p=kvm&f=2
[vnc]: https://docs.openstack.org/image-guide/virt-install.html





 3078  virsh net-destroy default
 3079  virsh net-start default


### Debain KVM documentation

https://wiki.debian.org/KVM

### Getting debian net install running

https://www.server-world.info/en/note?os=Debian_9&p=kvm&f=2

### Access text console

http://www.jaredlog.com/?p=1484

### Static addresses

https://serverfault.com/a/627245

### Setting up a bridge

https://wiki.debian.org/BridgeNetworkConnections

### Using bridge on guest

https://www.ibm.com/support/knowledgecenter/en/linuxonibm/liabp/liabpkvmsecbridge.htm

### Libvert commmand reference

https://libvirt.org/sources/virshcmdref/html/

### Forward ports with ufw

https://www.cyberciti.biz/faq/how-to-configure-ufw-to-forward-port-80443-to-internal-server-hosted-on-lan/

### Forward ports with iptables

https://aboullaite.me/kvm-qemo-forward-ports-with-iptables/

### SSL passthrough

https://stuff-things.net/2016/11/30/haproxy-sni/

### Setup server image with debootstrap

http://diogogomes.com/2012/07/13/debootstrap-kvm-image/index.html
https://www.packtpub.com/mapt/book/virtualization_and_cloud/9781788294676/1/ch01lvl1sec12/installing-a-custom-os-on-the-image-with-debootstrap

### Apt cacher

apt-get install apt-cacher-ng

### virsh commands

#### Starting/Stopping Guests

virsh start VMGUEST
virsh shutdown VMGUEST
virsh destroy VMGUEST

####


### Setup (debian stretch)

# install lib-virt deps
apt install qemu-kvm libvirt-clients libvirt-daemon-system

# add groups to manage vms from another user
adduser <youruser> libvirt
adduser <youruser> libvirt-qemu

# make a directs for images
mkdir -p /mnt/kvm/images

# TODO: setup bridge documentation

# create a virtual machine with net installer.
# setup, as expected.
# install grub on main disk
virt-install \
        --name load-balancer \
        --ram 4096 \
        --disk path=/var/kvm/images/load-balancer.img,size=15 \
        --vcpus 2 \
        --os-type linux \
        --os-variant debian9 \
        --network bridge=virbr0 \
        --graphics none \
        --console pty,target_type=serial \
        --location 'http://ftp.jaist.ac.jp/pub/Linux/debian/dists/stretch/main/installer-amd64/' \
        --extra-args 'console=ttyS0,115200n8 serial'

# for me the system reboots here, but doesn't give me a console.
# machine is running, but we don't have a console.
# to escape to the host run ^] (ctrl + ])


# we can now list the machine
```
# virsh list
Id    Name                           State
----------------------------------------------------
1     load-balancer                  running
...


# enable console login, by mounting the disk and setup getty for ttyS0
virsh shutdown load-balancer
guestmount -d load-balancer -i /mnt
ln -s /mnt/lib/systemd/system/getty@.service /mnt/etc/systemd/system/getty.target.wants/getty@ttyS0.service
umount /mnt

# can not start the server in console mode, add users, install ssh etc.
virsh start load-balancer --console

### Create an image with debootstrap
apt-get install debootstrap qemu-utils
modprobe nbd max_part=16

# create image
qemu-img create -f qcow2 mail-server.qcow2 20G

# mount as netword block device
kvm-nbd -c /dev/nbd0 mail-server.qcow2

# partition disk
sfdisk /dev/nbd0 << EOF
,4GiB,S
;
EOF

# create file systems
mkswap /dev/nbd0p1
mkfs.ext4 /dev/nbd0p2

# mount the disk
mount /dev/nbd0p2 /mnt/

# debootstrap
debootstrap --include=less,locales-all,vim,sudo,openssh-server stable /mnt

# setup chroot environment to configure system
mount --bind /dev/ /mnt/dev
chroot /mnt/ /bin/bash
mount -t proc none /proc
mount -t sysfs none /sys

# install grub
# when asked to select target device for GRUB to install on, do not select any and just continue.
apt-get install -y --force-yes linux-image-amd64 grub2
# my server runs raid disks, so maybe this is required?
apt-get install mdadm

grub-install /dev/nbd0
update-grub

# set root password
passwd root

# Allow access to the pseudo Terminal inside the new guest OS (not sure if required)
echo "pts/0" >> /etc/securetty

# Change the systemd run level to the multi-user level (not sure if required)
systemctl set-default multi-user.target

# create an fstab
echo "/dev/sda2 / ext4 defaults,discard 0 0" > /etc/fstab

# umount
umount /proc/ /sys/

# exit chroot
exit

# install again?
grub-install /dev/nbd0 --root-directory=/mnt --modules="biosdisk part_msdos" --force


sed -i 's/nbd0p2/sda2/g' /mnt/boot/grub/grub.cfg

umount /mnt/dev
umount /mnt

qemu-nbd --disconnect /dev/nbd0


virt-install \
        --name yolo \
        --ram 4096 \
        --disk path=/var/kvm/images/hello4.qcow2 \
        --vcpus 2 \
        --os-type linux \
        --os-variant debian9 \
        --network bridge=virbr0 \
        --graphics none \
        --console pty,target_type=serial \
        --noautoconsole \
        --import


        --extra-args 'console=ttyS0,115200n8 serial' \
 --force


