Ive got a tiny Acer Aspire netbook I use while commuting to work. Its a very
low specd machine but it has a very functional keyboard and I love programming
on it!

I think I enjoy programming on it because it _doesnt_ have Visual Studios
installed. I have the [Windows SDK][1] so I can build .NET projects with
MsBuild, but I mainly use it for developing Python code. With some free tools
and [notepad++][2] [plug-ins][3] its a great light weight environment for
coding simple Django and Google App Engine web applications and dynamic
language .NET applications.

Im not really into computer gaming, but I do like 2d physics games. I remember
losing days work when I first found [Magic Pen][4]. I decided to try using the
cool [Farseer Physics Engine][5], which is described on the Codeplex page as;

> The Farseer Physics Engine is an easy to use 2D physics engine designed for
Microsofts **XNA** and **Silverlight** platforms. The Farseer Physics Engine
focuses on simplicity, useful features, and enabling the creation of fun,
dynamic games.

<object data="data:application/x-silverlight," type="application/x-silverlight-2" width="500" height="300">
  <param name="source" value="physics.xap"/>
  <param name="background" value="white" />
  <param name="windowless" value="true" />
  Unable to Microsoft Silverlight application.
  <a href="http://go.microsoft.com/fwlink/?LinkID=124807" style="text-decoration: none;">
  Get Microsoft Silverlight
  </a>
</object>
<iframe style='visibility:hidden;height:0;width:0;border:0px'></iframe>

## Getting started

The Farseer engine is written in C# and I found once Id installed the
[Silverlight SDK][6] I could use MSBuild to build the Farseer engine that
targets the Silverlight runtime. The Farseer engine doesnt itself reference
anything Silverlight specific, but it does need to be built against the
limited .NET framework available in Silverlight.

Ive [previously blogged][7] about writing dynamic language Silverlight
applications; the [Silverlight Dynamic Languages SDK][8] contains the
Silverlight IronPython assemblies and a command line application called
Chiron. Chiron is a web server that runs from the command line and dynamically
packages up XAPs as they are requested.

## A little about XAPs

XAPs are packaged Silverlight applications that are downloaded and run on the
clients Silverlight runtime. It turns out the XAP is just zip files containing
the assemblies, resources and in the case of dynamic language applications,
some plain text source code!

Additionally there is an AppManifest.xaml included in the XAP which tells
Silverlight about what is included in the XAP and where to find an entry
point. Below is an example of an AppManifest.xaml automatically generated by
Chiron.


    <Deployment xmlns="http://schemas.microsoft.com/client/2007/deployment"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                RuntimeVersion="2.0.31005.0"
                EntryPointAssembly="Microsoft.Scripting.Silverlight"
                EntryPointType="Microsoft.Scripting.Silverlight.DynamicApplication">
      <Deployment.Parts>
        <AssemblyPart Source="Microsoft.Scripting.Silverlight.dll" />
        <AssemblyPart Source="Microsoft.Scripting.ExtensionAttribute.dll" />
        <AssemblyPart Source="Microsoft.Scripting.Core.dll" />
        <AssemblyPart Source="Microsoft.Scripting.dll" />
        <AssemblyPart Source="IronPython.dll" />
        <AssemblyPart Source="IronPython.Modules.dll" />
        <AssemblyPart x:Name="FarseerPhysics" Source="bin/FarseerPhysics.dll"/>
      </Deployment.Parts>
    </Deployment>


This would probably be more interesting compared to a non dynamic language
manifest file, but here are a few things I found interesting about it;

  * There is a whole lot of additional referenced assemblies required to
compile Pyhton code in the Silverlight client, and yes, they are included in
the XAP sent to the client.

  * The FarseerPhysics assembly is also included the XAP and is referenced in
the manifest.

  * The EntryPointType is really the only difference between XAP manifest
files generated for statically typed languages. For dynamic languages there
are additional assemblies that compile the dynamic code, there doesnt seem any
reason you couldnt feasibly write EntryPoint assemblies that interpreted [lol-
cat][9] or [brainfuck][10] code.

  * And, Im still targeting Silverlight 2! (Just havent got round to
upgrading..)

## Writing an application

I started by having a play with the Farseer engine by writing some IronPython
scripts and running them from the console. As its just a physics engine, it
can be coupled with any user interface, even a console.

When I tried to get the same script working in Silverlight I did encounter
some difficulties referencing the Farseer assembly. I had to use the
assemblies strong name, which I found using [Reflector][11], but seems
unnecessary given it was sent in the same XAP as the code referencing it!

Instead of just hacking this demo together in one giant script I decided to
structure my code a little, including separating the view and the simulation
model over different namespaces. Generally Im learning heaps about what is
pythonic, what I carry over from C/C++/C# and what is good software design.

Im not entirely happy with my view classes, which are just wrappers around
Silverlight controls. Even though the Silverlight control can be accessed
through a property, I feel this isnt the elegant solution I should be able to
build in a dynamic language. It seemed more right for the physics wrappers,
but still overly verbose.

## Conclusion

I limited the example for this post to a very simple, but interactive 2d
physics demo. Clicking any of the objects in the simulation creates a spring
between the object and the mouse cursor until the mouse click is released or
leaves the simulation view area.


The Farseer physics engine is a lot of fun to use, its easy to get into and
you can do some really cool stuff with it.

The [source code][12] is sent as plain text and compiled (or interpreted) on
client. As the XAP is just a normal zip file, it can unzipped by almost any
zip tool. Inside is all the plain text source code, compiled assemblies and
manifest file.

![image][13]

Its awesome to be able to develop Silverlight applications with physics
libraries using a high level language and light weight development
environment. Happy hacking..


   [1]: http://www.microsoft.com/downloads/details.aspx?FamilyID=e6e1c3df-a74f-4207-8586-711ebe331cdc&displaylang=en

   [2]: http://notepad-plus.sourceforge.net/uk/site.htm

   [3]: http://sourceforge.net/projects/npp-plugins/

   [4]: http://magic.pen.fizzlebot.com/

   [5]: http://www.codeplex.com/FarseerPhysics

   [6]: http://www.microsoft.com/downloads/details.aspx?familyid=9442b0f2-7465-417a-88f3-5e7b5409e9dd&displaylang=en

   [7]: http://blog.sharpthinking.com.au/post/2009/01/26/Silverlight-Dynamic-Languages-SDK.aspx

   [8]: http://sdlsdk.codeplex.com/(http://sdlsdk.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=25120)

   [9]: http://lolcode.com/

   [10]: http://www.muppetlabs.com/~breadbox/bf/

   [11]: http://www.red-gate.com/products/reflector/

   [12]: physics.xap

   [13]: image_thumb.png
